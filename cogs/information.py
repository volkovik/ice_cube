import discord
import asyncio
from discord import Status
from discord.ext import commands
from discord.ext.commands import CommandError
from sqlalchemy.orm import sessionmaker

from main import ENGINE_DB, __version__
from core.database import User, UserScoreToAnotherUser
from core.commands import BotCommand, BotGroupCommands
from core.templates import SuccessfulMessage, ErrorMessage
from core.converts import convert_status, convert_activity_type, convert_voice_region, convert_verification_level


class Information(commands.Cog, name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
    def __init__(self, bot):
        self.client = bot
        self.color = 0xFFCC4D

    @commands.command(
        cls=BotCommand, name="user",
        usage={"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å", False)}
    )
    async def user_information(self, ctx, user: commands.MemberConverter = None):
        """
        –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """

        if user is None:
            user = ctx.author

        status = convert_status(user.status)
        created_at = user.created_at.strftime("%d.%m.%Y, %H:%M:%S")
        joined_at = user.joined_at.strftime("%d.%m.%Y, %H:%M:%S")

        if type(user.activity) is discord.CustomActivity:
            activity = f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:** {user.activity}\n"

            if len(user.activities) > 1:
                activity += f"**{convert_activity_type(user.activities[1].type)}** {user.activities[1].name}\n"
        else:
            activity = f"**{convert_activity_type(user.activity.type)}** " \
                       f"{user.activity.name}\n" if user.activity else ""

        Session = sessionmaker(bind=ENGINE_DB)
        session = Session()

        user_from_db = session.query(User).filter_by(user_id=str(user.id)).first()
        bio = user_from_db.bio if user_from_db is not None else None

        up_score = session.query(UserScoreToAnotherUser).filter_by(rated_user_id=str(user.id), score=True).count()
        down_score = session.query(UserScoreToAnotherUser).filter_by(rated_user_id=str(user.id), score=False).count()

        user_score = up_score - down_score

        session.close()

        if bio is None:
            if user == ctx.author:
                bio = "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–¥–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `.bio`"
            else:
                bio = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–≤—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–¥–µ—Å—å"

        message = discord.Embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ \"{user.display_name}\"",
            description=bio,
            color=self.color
        )
        message.add_field(
            name="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ù–∏–∫–Ω–µ–π–º:** {user.name}#{user.discriminator}\n"
                  f"**–†–µ–ø—É—Ç–∞—Ü–∏—è:** {user_score}\n"
                  f"**–°—Ç–∞—Ç—É—Å:** {status}\n{activity}"
                  f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {created_at}\n"
                  f"**–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–µ–Ω–∏—è:** {joined_at}",
        )
        message.set_thumbnail(url=user.avatar_url_as(static_format="jpg"))
        message.set_footer(text=f"ID: {user.id}")

        await ctx.send(embed=message)

    @commands.command(
        cls=BotCommand, name="bio",
        usage={"—Ç–µ–∫—Å—Ç": ("–æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "
                         "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç)", True)}
    )
    async def change_bio(self, ctx, *, text=None):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        """

        Session = sessionmaker(bind=ENGINE_DB)
        session = Session()

        user_from_db = session.query(User).filter_by(user_id=str(ctx.author.id)).first()
        if user_from_db is None:
            user_from_db = User(user_id=str(ctx.author.id))
            session.add(user_from_db)

        previous_bio = user_from_db.bio

        if text is not None:
            if len(text) > 512:
                raise CommandError("–Ø –Ω–µ –º–æ–≥—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–µ 512 —Å–∏–º–≤–æ–ª–æ–≤")
            elif text == previous_bio:
                raise CommandError("–í–≤–µ–¥—ë–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
            else:
                user_from_db.bio = text
                message = SuccessfulMessage("–Ø –∏–∑–º–µ–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ")
        else:
            if previous_bio is None:
                raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç")
            else:
                user_from_db.bio = None

                message = SuccessfulMessage("–Ø —É–¥–∞–ª–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ")

        await ctx.send(embed=message)

        session.commit()
        session.close()

    @commands.group(
        cls=BotGroupCommands, name="rate", invoke_without_command=True,
        usage={"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å", True)}
    )
    async def set_reputation_for_user(self, ctx, user: commands.MemberConverter):
        """
        –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """

        if user == ctx.author:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif user.bot:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞")

        timeout_message = ErrorMessage("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")

        Session = sessionmaker(bind=ENGINE_DB)
        session = Session()

        db_kwargs = {
            "user_id": str(ctx.author.id),
            "rated_user_id": str(user.id)
        }

        user_score_from_db = session.query(UserScoreToAnotherUser).filter_by(**db_kwargs).first()

        emojis = {
            "up": "<:up:737302701846560818>",
            "down": "<:down:737302708574486558>",
            "cancel": "üö´"
        }

        def check(reaction, user):
            return ctx.author == user and str(reaction) in emojis.values()

        if user_score_from_db is None:
            embed = discord.Embed(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                description=f"{emojis['up']} - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è {emojis['down']} - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è\n\n"
                            f"{emojis['cancel']} - –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )

            message = await ctx.send(embed=embed)

            await message.add_reaction(emojis["up"])
            await message.add_reaction(emojis["down"])
            await message.add_reaction(emojis["cancel"])

            try:
                reaction, _ = await self.client.wait_for('reaction_add', timeout=60.0, check=check)
            except asyncio.TimeoutError:
                await message.edit(embed=timeout_message)
                await message.clear_reactions()
            else:
                if str(reaction) == emojis["up"]:
                    session.add(UserScoreToAnotherUser(**db_kwargs, score=True))
                    await message.edit(embed=SuccessfulMessage(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É "
                                                               f"`{user.display_name}`"))
                elif str(reaction) == emojis["down"]:
                    session.add(UserScoreToAnotherUser(**db_kwargs, score=False))
                    await message.edit(embed=SuccessfulMessage(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É "
                                                               f"`{user.display_name}`"))
                else:
                    await message.edit(embed=discord.Embed(
                        title=":x: –û—Ç–º–µ–Ω–µ–Ω–æ",
                        description="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                        color=0xDD2E44
                    ))

                await message.clear_reactions()
        else:
            cancelled_message = discord.Embed(
                title=":x: –û—Ç–º–µ–Ω–µ–Ω–æ",
                description="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                color=0xDD2E44
            )

            emojis["remove"] = "‚ùå"

            if user_score_from_db.score is True:
                del emojis["up"]

                embed = discord.Embed(
                    title="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    description=f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: `–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è`\n"
                                f"{emojis['down']} - –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é\n"
                                f"{emojis['remove']} - –£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
                                f"{emojis['cancel']} - –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                )

                message = await ctx.send(embed=embed)

                await message.add_reaction(emojis["down"])
                await message.add_reaction(emojis["remove"])
                await message.add_reaction(emojis["cancel"])

                try:
                    reaction, _ = await self.client.wait_for('reaction_add', timeout=60.0, check=check)
                except asyncio.TimeoutError:
                    await message.edit(embed=timeout_message)
                    await message.clear_reactions()
                else:
                    if str(reaction) == emojis["down"]:
                        user_score_from_db.score = False
                        await message.edit(embed=SuccessfulMessage(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é "
                                                                   f"`{user.display_name}`"))
                    elif str(reaction) == emojis["remove"]:
                        session.delete(user_score_from_db)
                        await message.edit(embed=SuccessfulMessage(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –æ—Ü–µ–Ω–∫—É `{user.display_name}`"))
                    else:
                        await message.edit(embed=cancelled_message)

                    await message.clear_reactions()
            else:
                del emojis["down"]

                embed = discord.Embed(
                    title="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    description=f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: `–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è`\n"
                                f"{emojis['up']} - –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é\n"
                                f"{emojis['remove']} - –£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
                                f"{emojis['cancel']} - –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                )

                message = await ctx.send(embed=embed)

                await message.add_reaction(emojis["up"])
                await message.add_reaction(emojis["remove"])
                await message.add_reaction(emojis["cancel"])

                try:
                    reaction, _ = await self.client.wait_for('reaction_add', timeout=60.0, check=check)
                except asyncio.TimeoutError:
                    await message.edit(embed=timeout_message)
                    await message.clear_reactions()
                else:
                    if str(reaction) == emojis["up"]:
                        user_score_from_db.score = True
                        await message.edit(embed=SuccessfulMessage(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é "
                                                                   f"`{user.display_name}`"))
                    elif str(reaction) == emojis["remove"]:
                        session.delete(user_score_from_db)
                        await message.edit(embed=SuccessfulMessage(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –æ—Ü–µ–Ω–∫—É `{user.display_name}`"))
                    else:
                        await message.edit(embed=cancelled_message)

                    await message.clear_reactions()

        session.commit()
        session.close()

    @set_reputation_for_user.command(
        cls=BotCommand, name="up",
        usage={"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å", True)}
    )
    async def rate_up_user(self, ctx, user: commands.MemberConverter):
        """
        –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é
        """

        if user == ctx.author:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif user.bot:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞")

        Session = sessionmaker(bind=ENGINE_DB)
        session = Session()

        db_kwargs = {
            "user_id": str(ctx.author.id),
            "rated_user_id": str(user.id)
        }

        score_from_db = session.query(UserScoreToAnotherUser).filter_by(**db_kwargs).first()

        if score_from_db is None:
            session.add(UserScoreToAnotherUser(**db_kwargs, score=True))
            embed = SuccessfulMessage(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É `{user.display_name}`")
        else:
            if score_from_db.score is True:
                session.close()
                raise CommandError("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                score_from_db.score = True
                embed = SuccessfulMessage(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é `{user.display_name}`")

        await ctx.send(embed=embed)

        session.commit()
        session.close()

    @set_reputation_for_user.command(
        cls=BotCommand, name="down",
        usage={"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å", True)}
    )
    async def rate_down_user(self, ctx, user: commands.MemberConverter):
        """
        –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é
        """

        if user == ctx.author:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif user.bot:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞")

        Session = sessionmaker(bind=ENGINE_DB)
        session = Session()

        db_kwargs = {
            "user_id": str(ctx.author.id),
            "rated_user_id": str(user.id)
        }

        score_from_db = session.query(UserScoreToAnotherUser).filter_by(**db_kwargs).first()

        if score_from_db is None:
            session.add(UserScoreToAnotherUser(**db_kwargs, score=False))
            embed = SuccessfulMessage(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É `{user.display_name}`")
        else:
            if score_from_db.score is False:
                session.close()
                raise CommandError("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                score_from_db.score = False
                embed = SuccessfulMessage(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é `{user.display_name}`")

        await ctx.send(embed=embed)

        session.commit()
        session.close()

    @set_reputation_for_user.command(
        cls=BotCommand, name="remove",
        usage={"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å", True)}
    )
    async def rate_down_user(self, ctx, user: commands.MemberConverter):
        """
        –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """

        if user == ctx.author:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif user.bot:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É —É –±–æ—Ç–∞")

        Session = sessionmaker(bind=ENGINE_DB)
        session = Session()

        db_kwargs = {
            "user_id": str(ctx.author.id),
            "rated_user_id": str(user.id)
        }

        score_from_db = session.query(UserScoreToAnotherUser).filter_by(**db_kwargs)

        if score_from_db is None:
            raise CommandError("–í—ã –Ω–µ —Å—Ç–∞–≤–∏–ª–∏ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ü–µ–Ω–∫—É")
        else:
            score_from_db.delete()
            embed = SuccessfulMessage(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –æ—Ü–µ–Ω–∫—É `{user.display_name}`")

            await ctx.send(embed=embed)

        session.commit()
        session.close()

    @commands.command(cls=BotCommand, name="server")
    async def server_information(self, ctx):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        """

        server = ctx.guild

        region = convert_voice_region(server.region)
        verification = convert_verification_level(server.verification_level)
        security = str(verification) + (" (2FA)" if server.mfa_level is True else "")
        created_at = server.created_at.strftime("%d.%m.%Y, %H:%M:%S")

        def members_counter():
            members = server.members

            bots = len([x for x in members if x.bot])
            users = len(members) - bots
            online = len([x for x in members if x.status is not (Status.offline or Status.invisible) and not x.bot])
            offline = len([x for x in members if x.status is (Status.offline or Status.invisible) and not x.bot])

            info = f"–ë–æ—Ç–æ–≤: **{bots}**"
            info += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{users}**"
            info += f"\n–û–Ω–ª–∞–π–Ω: **{online}**" if online != 0 else ""
            info += f"\n–û—Ñ—Ñ–ª–∞–π–Ω: **{offline}**" if offline != 0 else ""

            return info

        def channels_counter():
            text = len(server.text_channels)
            voice = len(server.voice_channels)

            info = f"–í—Å–µ–≥–æ: **{voice + text}**" \
                   f"\n–¢–µ–∫—Å—Ç–æ–≤—ã—Ö: **{text}**"
            info += f"\n–ì–æ–ª–æ—Å–æ–≤—ã—Ö: **{voice}**"

            return info

        message = discord.Embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ \"{server.name}\"",
            description=f"**–í–ª–∞–¥–µ–ª–µ—Ü:** {server.owner}"
                        f"\n**–†–µ–≥–∏–æ–Ω:** {region}"
                        f"\n**–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:** {security}"
                        f"\n**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {created_at}",
            color=self.color
        )
        message.add_field(
            name="–£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value=members_counter(),
            inline=True
        )
        message.add_field(
            name="–ö–∞–Ω–∞–ª—ã",
            value=channels_counter(),
            inline=True
        )
        message.set_thumbnail(url=server.icon_url_as(static_format="jpg", size=512))
        message.set_footer(text=f"ID: {server.id}")

        await ctx.send(embed=message)

    @commands.command(cls=BotCommand, name="info")
    async def about_bot(self, ctx):
        """
        –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        """

        message = discord.Embed(
            title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Ice Cube",
            description="**Ice Cube** - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —è–∑—ã–∫–µ Python. –°–µ–π—á–∞—Å, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É –±–æ—Ç–∞ "
                        "—Å–∫—É–¥–Ω—ã–π, –Ω–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –æ–Ω –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞: "
                        "**[volkovik](https://github.com/volkovik)**",
            color=0xAEE4FC
        )
        message.set_thumbnail(url=self.client.user.avatar_url)
        message.set_footer(
            text="¬© –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã volkovik 2020",
            icon_url="https://avatars.githubusercontent.com/u/40608600"
        )
        message.add_field(
            name="–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏",
            value="[Discord —Å–µ—Ä–≤–µ—Ä](https://discord.gg/atxwBRB)\n"
                  "[GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π](https://github.com/volkovik/ice_cube)"
        )
        message.add_field(
            name="–í–µ—Ä—Å–∏—è –±–æ—Ç–∞",
            value=__version__
        )

        await ctx.send(embed=message)


def setup(bot):
    bot.add_cog(Information(bot))
