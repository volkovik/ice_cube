import random
from discord.ext import commands
from discord.ext.commands import CommandError

from main import Session
from core.commands import Cog, Group, Command
from core.templates import SuccessfulMessage, DefaultEmbed as Embed, send_message_with_reaction_choice
from core.database import (UserLevel, ServerSettingsOfLevels, ServerAwardOfLevels, ServerIgnoreChannelsListOfLevels,
                           ServerIgnoreRolesListOfLevels)

from .utils import (format_levelup_message, level_system_is_enabled, level_system_is_on,
                    DEFAULT_LEVELUP_MESSAGE_FOR_SERVER, DEFAULT_LEVELUP_MESSAGE_FOR_DM)


def level_system_is_off():
    def predicate(ctx):
        session = Session()
        is_off = not level_system_is_enabled(session, ctx)
        session.close()

        return is_off

    return commands.check(predicate)


def notify_of_levelup_is_enabled(session, ctx):
    settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(ctx.guild.id)).first()

    return settings.notify_of_levelup if settings is not None else False


def notify_of_levelup_is_on():
    def predicate(ctx):
        session = Session()
        if not level_system_is_enabled(session, ctx):
            session.close()
            return False
        is_on = notify_of_levelup_is_enabled(session, ctx)
        session.close()

        return is_on

    return commands.check(predicate)


def notify_of_levelup_is_off():
    def predicate(ctx):
        session = Session()
        if not level_system_is_enabled(session, ctx):
            session.close()
            return False
        is_off = not notify_of_levelup_is_enabled(session, ctx)
        session.close()

        return is_off

    return commands.check(predicate)


def levelup_message_is_custom():
    def predicate(ctx):
        session = Session()
        if not (level_system_is_enabled(session, ctx) and notify_of_levelup_is_enabled(session, ctx)):
            session.close()
            return False
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        session.close()

        return settings.levelup_message is not None if settings is not None else False

    return commands.check(predicate)


def levelup_message_destination_is_not_dm():
    def predicate(ctx):
        session = Session()
        if not (level_system_is_enabled(session, ctx) and notify_of_levelup_is_enabled(session, ctx)):
            session.close()
            return False
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        session.close()

        return not settings.levelup_message_dm if settings is not None else False

    return commands.check(predicate)


def levelup_message_destination_is_not_current():
    def predicate(ctx):
        session = Session()
        if not level_system_is_enabled(session, ctx) or not notify_of_levelup_is_enabled(session, ctx):
            session.close()
            return False
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        session.close()

        return settings.levelup_message_channel_id is not None or settings.levelup_message_dm \
            if settings is not None else False

    return commands.check(predicate)


def level_awards_exist():
    def predicate(ctx):
        session = Session()
        if not level_system_is_enabled(session, ctx):
            session.close()
            return False
        award = session.query(ServerAwardOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        session.close()

        return award is not None

    return commands.check(predicate)


def channels_in_ignore_list_exist():
    def predicate(ctx):
        session = Session()
        if not level_system_is_enabled(session, ctx):
            session.close()
            return False
        ignored = session.query(ServerIgnoreChannelsListOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        session.close()

        return ignored is not None

    return commands.check(predicate)


def roles_in_ignore_list_exist():
    def predicate(ctx):
        session = Session()
        if not level_system_is_enabled(session, ctx):
            session.close()
            return False
        ignored = session.query(ServerIgnoreRolesListOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        session.close()

        return ignored is not None

    return commands.check(predicate)


class LevelsSettings(Cog, name="settings"):
    def __init__(self, bot):
        super(LevelsSettings, self).__init__(bot)
        self.ru_name = "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

    @commands.group(name="setlevels", invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    async def levels_settings(self, ctx):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """

        embed = Embed(
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        )

        session = Session()
        if level_system_is_enabled(session, ctx):
            embed.description = f"**–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤–∫–ª—é—á—ë–Ω —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**\n\n" \
                                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `{ctx.prefix}help setlevels`, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n" \
                                f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —ç—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `{ctx.prefix}setlevels disable`"
        else:
            embed.description = f"**–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.**\n\n" \
                                f"–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —ç—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `{ctx.prefix}setlevels enable`"
        session.close()

        await ctx.send(embed=embed)

    @levels_settings.command(cls=Command, name="enable")
    @commands.has_permissions(administrator=True)
    @level_system_is_off()
    async def enable_levels_system(self, ctx):
        """
        –í–∫–ª—é—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """

        session = Session()
        session.add(ServerSettingsOfLevels(server_id=str(ctx.guild.id)))
        session.commit()
        session.close()

        message = SuccessfulMessage(f"–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
                                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `{ctx.prefix}help setlevels`, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ "
                                    f"–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

        await ctx.send(embed=message)

    @levels_settings.command(cls=Command, name="disable")
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def disable_levels_system(self, ctx):
        """
        –í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """

        server = ctx.guild

        session = Session()
        db_kwargs = {
            "server_id": str(server.id)
        }
        server_settings = session.query(ServerSettingsOfLevels).filter_by(**db_kwargs).first()

        emojis = {
            "accept": "‚úÖ",
            "cancel": "üö´"
        }

        embed = Embed(
            title="–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            description=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?\n\n"
                        f"{emojis['accept']} - –î–∞, –≤—ã–∫–ª—é—á–∏—Ç—å\n"
                        f"{emojis['cancel']} - –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ"
        )

        message, answer = await send_message_with_reaction_choice(self.client, ctx, embed, emojis)

        if answer == "accept":
            session.delete(server_settings)
            session.query(UserLevel).filter_by(**db_kwargs).delete()
            session.commit()

            await message.edit(embed=SuccessfulMessage("–í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"))
        elif answer == "cancel":
            await message.edit(embed=SuccessfulMessage("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"))

        session.close()

    @levels_settings.group(name="message", invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def levelup_message(self, ctx):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        """

        server = ctx.guild

        session = Session()
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(server.id)).first()
        session.close()

        if not settings.notify_of_levelup:
            where_sends = "**–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –≤—ã–∫–ª—é—á–µ–Ω–æ**\n" \
                          "–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `.setlevels message send enable`"
        else:
            if settings.levelup_message_dm:
                where_sends = "**–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ–ª—É—á–∏–≤—à–∏–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å**"
            else:
                if settings.levelup_message_channel_id is None:
                    channel = None
                else:
                    channel = server.get_channel(int(settings.levelup_message_channel_id))

                if channel is None:
                    settings.levelup_message_channel_id = None
                    session.commit()

                    where_sends = f"**–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –≤ —Ç–æ–º –∂–µ –∫–∞–Ω–µ–ª–µ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π " \
                                  f"—É—Ä–æ–≤–µ–Ω—å**"
                else:
                    where_sends = f"**–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è –≤ {channel.mention}, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª " \
                                  f"–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å**"

            where_sends += f"\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É " \
                           f"`{ctx.prefix}setlevels message send`. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ: " \
                           f"`{ctx.prefix}help setlevels message send`\n"

        if settings.levelup_message is None:
            if settings.levelup_message_dm:
                text = DEFAULT_LEVELUP_MESSAGE_FOR_DM
            else:
                text = DEFAULT_LEVELUP_MESSAGE_FOR_SERVER

            edit_info = "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `>setlevels message edit`. "
        else:
            text = settings.levelup_message
            edit_info = "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `>setlevels message edit` –∏–ª–∏ " \
                        "—Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `>setlevels message edit default`. "

        edit_info += "–†–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `$member_mention`, " \
                     "—á—Ç–æ–±—ã —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
                     "**–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:**\n" \
                     "`$member_name` - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
                     "`$member_mention` - —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
                     "`$server_name` - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n" \
                     "`$level` - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å"

        embed = Embed(
            title="–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è",
            description=format_levelup_message(text, ctx, random.randint(1, 50))
        )
        embed.add_field(
            name="–ì–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
            value=where_sends,
            inline=False
        )
        embed.add_field(
            name="–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
            value=edit_info
        )

        await ctx.send(embed=embed)

    @levelup_message.command(name="enable")
    @commands.has_permissions(administrator=True)
    @notify_of_levelup_is_off()
    async def enable_notify_of_levelup(self, ctx):
        """
        –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """

        session = Session()
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        settings.notify_of_levelup = True
        session.commit()
        session.close()

        await ctx.send(embed=SuccessfulMessage("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))

    @levelup_message.command(name="disable")
    @commands.has_permissions(administrator=True)
    @notify_of_levelup_is_on()
    async def disable_notify_of_levelup(self, ctx):
        """
        –í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """

        session = Session()
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        settings.notify_of_levelup = False
        session.commit()
        session.close()

        await ctx.send(embed=SuccessfulMessage("–í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))

    @levelup_message.group(
        cls=Group, name="edit", invoke_without_command=True,
        usage={"—Ç–µ–∫—Å—Ç": ("—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", True)}
    )
    @commands.has_permissions(administrator=True)
    @notify_of_levelup_is_on()
    async def edit_levelup_message(self, ctx, *, text=None):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """

        session = Session()
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(ctx.guild.id)).first()

        if text is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç")
        elif len(text) > 256:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–µ 256 —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            settings.levelup_message = text

        session.commit()
        session.close()

        await ctx.send(embed=SuccessfulMessage("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"))

    @edit_levelup_message.command(cls=Command, name="default")
    @commands.has_permissions(administrator=True)
    @levelup_message_is_custom()
    async def reset_levelup_message(self, ctx):
        """
        –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """

        session = Session()
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(ctx.guild.id)).first()
        settings.levelup_message = None
        session.commit()
        session.close()

        await ctx.send(embed=SuccessfulMessage("–í—ã —Å–±—Ä–æ—Å–∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"))

    @levelup_message.group(
        cls=Group, name="send", invoke_without_command=True,
        usage={"–∫–∞–Ω–∞–ª": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞", True)}
    )
    @commands.has_permissions(administrator=True)
    @notify_of_levelup_is_on()
    async def edit_levelup_message_destination(self, ctx, channel=None):
        """
        –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª, –≥–¥–µ –ø—Ä–∏—Å—ã–ª–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        """

        if channel is None:
            await ctx.send_help(ctx.command)
            return

        converter = commands.TextChannelConverter()
        channel = await converter.convert(ctx, channel)

        server = ctx.guild

        session = Session()
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(server.id)).first()

        if not settings.levelup_message_dm and settings.levelup_message_channel_id is not None and \
                channel.id == int(settings.levelup_message_channel_id):
            session.close()
            raise CommandError("–í –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ —É–∂–µ –∏ —Ç–∞–∫ –ø—Ä–∏—Å—ã–ª–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ")
        else:
            settings.levelup_message_dm = False
            settings.levelup_message_channel_id = str(channel.id)
            session.commit()

            await ctx.send(embed=SuccessfulMessage(f"–¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤ "
                                                   f"{channel.mention}"))

        session.close()

    @edit_levelup_message_destination.command(name="dm")
    @commands.has_permissions(administrator=True)
    @levelup_message_destination_is_not_dm()
    async def set_levelup_message_destination_as_user_dm(self, ctx):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """

        server = ctx.guild

        session = Session()
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(server.id)).first()
        settings.levelup_message_dm = True
        settings.levelup_message_channel_id = None
        session.commit()
        session.close()

        await ctx.send(embed=SuccessfulMessage("–¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤ –õ–° "
                                               "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"))

    @edit_levelup_message_destination.command(name="current")
    @commands.has_permissions(administrator=True)
    @levelup_message_destination_is_not_current()
    async def set_levelup_message_destination_as_channel_where_reached_new_level(self, ctx):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –≤ —Ç–æ–º –∫–∞–Ω–∞–ª–µ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        """

        server = ctx.guild

        session = Session()
        settings = session.query(ServerSettingsOfLevels).filter_by(server_id=str(server.id)).first()
        settings.levelup_message_dm = False
        settings.levelup_message_channel_id = None
        session.commit()
        session.close()

        await ctx.send(embed=SuccessfulMessage("–¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –∫–∞–Ω–∞–ª–µ "
                                               "–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"))

    @levels_settings.group(name="award", invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def awards_for_levels(self, ctx):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        """

        server = ctx.guild

        session = Session()
        awards = session.query(ServerAwardOfLevels).filter_by(server_id=str(server.id)).all()
        session.close()

        higher_bot_role = server.me.roles[-1]

        sorted_awards = {}
        unavailable_awards = []

        for award in awards:
            role = server.get_role(int(award.role_id))

            if role is None:
                session.delete(award)
                session.commit()
                continue

            if role > higher_bot_role:
                unavailable_awards.append(f"`{role.name}`")
            else:
                if award.level in sorted_awards:
                    sorted_awards[award.level].append(f"`{role.name}`")
                else:
                    sorted_awards[award.level] = [f"`{role.name}`"]

        if sorted_awards:
            text = "\n".join([f"`{level} —É—Ä–æ–≤–µ–Ω—å`: {', '.join(roles)}" for level, roles in sorted_awards.items()])
        else:
            text = f"**–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç**"

            if not unavailable_awards:
                text += f"\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è " \
                        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É `.setlevels award add`"

        embed = Embed(
            title="–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è",
            description=text
        )

        if unavailable_awards:
            embed.add_field(
                name="–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏",
                value=", ".join(unavailable_awards) +
                      "\n\n–î–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω—ã –±–æ—Ç–æ–º –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–æ–ª—å –±–æ—Ç–∞ –≤—ã—à–µ —ç—Ç–∏—Ö "
                      "—Ä–æ–ª–µ–π –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `.setlevels award remove`"
            )

        await ctx.send(embed=embed)

    @awards_for_levels.command(
        cls=Command, name="add",
        usage={
            "—Ä–æ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", True),
            "—É—Ä–æ–≤–µ–Ω—å": ("–ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Ä–æ–ª—å", True)
        }
    )
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def add_award_for_level(self, ctx, role: commands.RoleConverter = None, level: int = None):
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        """

        if role is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–æ–ª—å")

        if level > 1000:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –±–æ–ª—å—à–µ 1000-–≥–æ")
        elif level < 0:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—å—à–µ –Ω—É–ª—è")

        server = ctx.guild

        session = Session()
        db_kwargs = {
            "server_id": str(server.id),
            "role_id": str(role.id)
        }
        award = session.query(ServerAwardOfLevels).filter_by(**db_kwargs).first()

        higher_bot_role = server.me.roles[-1]

        if award is not None:
            session.close()
            raise CommandError("–≠—Ç–∞ —Ä–æ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã.\n"
                               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.setlevels award edit`, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë")
        elif higher_bot_role < role:
            session.close()
            raise CommandError("–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –≤—ã—à–µ —Ä–æ–ª–∏ –±–æ—Ç–∞. –í—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–æ–ª—å –±–æ—Ç–∞ –≤—ã—à–µ, —á–µ–º —ç—Ç–∞ —Ä–æ–ª—å, —á—Ç–æ–±—ã "
                               "–±–æ—Ç —Å–º–æ–≥ –≤—ã–¥–∞–≤–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        else:
            if level is None:
                session.close()
                raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —É—Ä–æ–≤–µ–Ω—å")

            award = ServerAwardOfLevels(**db_kwargs, level=level)
            session.add(award)
            session.commit()
            session.close()

            await ctx.send(embed=SuccessfulMessage(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ä–æ–ª—å `{role.name}` –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é "
                                                   f"`{level} —É—Ä–æ–≤–Ω—è`"))

    @awards_for_levels.command(
        cls=Command, name="edit",
        usage={
            "—Ä–æ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", True),
            "—É—Ä–æ–≤–µ–Ω—å": ("–ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Ä–æ–ª—å", True)
        }
    )
    @commands.has_permissions(administrator=True)
    @level_awards_exist()
    async def edit_award_for_level(self, ctx, role: commands.RoleConverter = None, level: int = None):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏
        """

        if role is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–æ–ª—å")
        elif level is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —É—Ä–æ–≤–µ–Ω—å")

        if level > 1000:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –±–æ–ª—å—à–µ 1000-–≥–æ")
        elif level < 0:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—å—à–µ –Ω—É–ª—è")

        session = Session()
        award = session.query(ServerAwardOfLevels).filter_by(server_id=str(ctx.guild.id), role_id=str(role.id)).first()

        if award is None:
            session.close()
            raise CommandError("–≠—Ç–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–µ–Ω—å.\n"
                               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.setlevels award add`, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë")
        elif level == award.level:
            session.close()
            raise CommandError("–≠—Ç—É —Ä–æ–ª—å –∏ —Ç–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –¥–æ—Å—Ç–∏–≥–Ω—É–≤ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è")
        else:
            award.level = level
            session.commit()
            session.close()

            await ctx.send(embed=SuccessfulMessage(f"–¢–µ–ø–µ—Ä—å —Ä–æ–ª—å `{role.name}` –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é `{level} "
                                                   f"—É—Ä–æ–≤–Ω—è`"))

    @awards_for_levels.command(
        cls=Command, name="remove",
        usage={"—Ä–æ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞", True)}
    )
    @commands.has_permissions(administrator=True)
    @level_awards_exist()
    async def remove_award_for_level(self, ctx, role: commands.RoleConverter = None):
        """
        –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        """

        if role is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–æ–ª—å")

        session = Session()
        award = session.query(ServerAwardOfLevels).filter_by(server_id=str(ctx.guild.id), role_id=str(role.id)).first()

        if award is None:
            session.close()
            raise CommandError("–≠—Ç–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–µ–Ω—å.")
        else:
            session.delete(award)
            session.commit()
            session.close()

            await ctx.send(embed=SuccessfulMessage(f"–í—ã —É–¥–∞–ª–∏–ª–∏ —Ä–æ–ª—å `{role.name}` –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–µ–Ω—å"))

    @awards_for_levels.command(name="reset")
    @commands.has_permissions(administrator=True)
    @level_awards_exist()
    async def reset_awards_for_levels(self, ctx):
        """
        –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        """

        session = Session()

        emojis = {
            "accept": "‚úÖ",
            "cancel": "üö´"
        }

        embed = Embed(
            title="–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥",
            description=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–µ–Ω—å?\n\n"
                        f"{emojis['accept']} - –î–∞, –≤—ã–∫–ª—é—á–∏—Ç—å\n"
                        f"{emojis['cancel']} - –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
        )

        message, answer = await send_message_with_reaction_choice(self.client, ctx, embed, emojis)

        if answer == "accept":
            session.query(ServerAwardOfLevels).filter_by(server_id=str(ctx.guild.id)).delete()
            session.commit()

            embed = SuccessfulMessage("–í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å")
            await message.edit(embed=embed)
        elif answer == "cancel":
            await message.edit(embed=SuccessfulMessage("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥"))

        session.close()

    @levels_settings.group(name="ignore", invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def ignore_list(self, ctx):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        """

        server = ctx.guild

        session = Session()
        ignored_channels = session.query(ServerIgnoreChannelsListOfLevels).filter_by(server_id=str(server.id)).all()
        ignored_roles = session.query(ServerIgnoreRolesListOfLevels).filter_by(server_id=str(server.id)).all()

        verified_channels = []
        verified_roles = []

        if ignored_channels:
            for ignored in ignored_channels:
                channel = server.get_channel(int(ignored.channel_id))

                if channel is not None:
                    verified_channels.append(f"`{channel.name}`")
                else:
                    session.delete(ignored)
                    session.commit()

        if ignored_roles:
            for ignored in ignored_roles:
                role = server.get_role(int(ignored.role_id))

                if role is not None:
                    verified_roles.append(f"`{role.name}`")
                else:
                    session.delete(ignored)
                    session.commit()

        session.close()

        if verified_channels:
            channels_text = "\n".join(verified_channels)
        else:
            channels_text = f"**–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç**"

        if verified_roles:
            roles_text = "\n".join(verified_roles)
        else:
            roles_text = f"**–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç**"

        embed = Embed(
            title="–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        )
        embed.add_field(
            name="–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã",
            value=channels_text,
            inline=True
        )
        embed.add_field(
            name="–†–æ–ª–∏",
            value=roles_text,
            inline=True
        )
        embed.add_field(
            name="–ß—Ç–æ —Ç–∞–∫–æ–µ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫?",
            value=f"–î–æ–±–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø—ã—Ç –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.\n"
                  f"–î–æ–±–∞–≤–ª—è—è —Ä–æ–ª—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø—ã—Ç.\n"
                  f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{ctx.prefix}help setlevels ignore`, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
            inline=False
        )

        await ctx.send(embed=embed)

    @ignore_list.group(name="channel", invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def channel_ignore_list(self, ctx):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        """

        await ctx.send_help(ctx.command)

    @channel_ignore_list.command(
        cls=Command, name="add",
        usage={"–∫–∞–Ω–∞–ª": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞", True)}
    )
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def add_channel_to_ignore_list(self, ctx, channel: commands.TextChannelConverter):
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """

        if channel is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª")

        session = Session()
        db_kwargs = {
            "server_id": str(ctx.guild.id),
            "channel_id": str(channel.id)
        }
        ignored_channel = session.query(ServerIgnoreChannelsListOfLevels).filter_by(**db_kwargs).first()

        if ignored_channel is not None:
            session.close()
            raise CommandError("–î–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        else:
            ignored_channel = ServerIgnoreChannelsListOfLevels(**db_kwargs)
            session.add(ignored_channel)
            session.commit()
            session.close()

            await ctx.send(embed=SuccessfulMessage("–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"))

    @channel_ignore_list.command(
        cls=Command, name="remove",
        usage={"–∫–∞–Ω–∞–ª": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞", True)}
    )
    @commands.has_permissions(administrator=True)
    @channels_in_ignore_list_exist()
    async def remove_channel_from_ignore_list(self, ctx, channel: commands.TextChannelConverter):
        """
        –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        """

        if channel is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª")

        session = Session()
        db_kwargs = {
            "server_id": str(ctx.guild.id),
            "channel_id": str(channel.id)
        }
        ignored_channel = session.query(ServerIgnoreChannelsListOfLevels).filter_by(**db_kwargs).first()

        if ignored_channel is None:
            session.close()
            raise CommandError("–î–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        else:
            session.delete(ignored_channel)
            session.commit()
            session.close()

            await ctx.send(embed=SuccessfulMessage("–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"))

    @channel_ignore_list.command(name="reset")
    @commands.has_permissions(administrator=True)
    @channels_in_ignore_list_exist()
    async def reset_ignore_list_for_channels(self, ctx):
        """
        –°–±—Ä–æ—Å–∏—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        """

        session = Session()
        session.query(ServerIgnoreChannelsListOfLevels).filter_by(server_id=str(ctx.guild.id)).delete()
        session.commit()
        session.close()

        await ctx.send(embed=SuccessfulMessage("–í—ã —Å–±—Ä–æ—Å–∏–ª–∏ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"))

    @ignore_list.group(name="role", invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def role_ignore_list(self, ctx):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–æ–ª–µ–π
        """

        await ctx.send_help(ctx.command)

    @role_ignore_list.command(
        cls=Command, name="add",
        usage={"—Ä–æ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", True)}
    )
    @commands.has_permissions(administrator=True)
    @level_system_is_on()
    async def add_role_to_ignore_list(self, ctx, role: commands.RoleConverter):
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """

        if role is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–æ–ª—å")

        session = Session()
        db_kwargs = {
            "server_id": str(ctx.guild.id),
            "role_id": str(role.id)
        }
        ignored_role = session.query(ServerIgnoreRolesListOfLevels).filter_by(**db_kwargs).first()

        if ignored_role is not None:
            session.close()
            raise CommandError("–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        else:
            ignored_role = ServerIgnoreRolesListOfLevels(**db_kwargs)
            session.add(ignored_role)
            session.commit()
            session.close()

            await ctx.send(embed=SuccessfulMessage("–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ä–æ–ª—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"))

    @role_ignore_list.command(
        cls=Command, name="remove",
        usage={"—Ä–æ–ª—å": ("—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏", True)}
    )
    @commands.has_permissions(administrator=True)
    @roles_in_ignore_list_exist()
    async def remove_role_from_ignore_list(self, ctx, role: commands.RoleConverter):
        """
        –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        """

        if role is None:
            raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–æ–ª—å")

        session = Session()
        db_kwargs = {
            "server_id": str(ctx.guild.id),
            "role_id": str(role.id)
        }
        ignored_role = session.query(ServerIgnoreRolesListOfLevels).filter_by(**db_kwargs).first()

        if ignored_role is None:
            session.close()
            raise CommandError("–î–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        else:
            session.delete(ignored_role)
            session.commit()
            session.close()

            await ctx.send(embed=SuccessfulMessage("–í—ã —É–¥–∞–ª–∏–ª–∏ —Ä–æ–ª—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"))

    @role_ignore_list.command(name="reset")
    @commands.has_permissions(administrator=True)
    @roles_in_ignore_list_exist()
    async def reset_ignore_list_for_roles(self, ctx):
        """
        –°–±—Ä–æ—Å–∏—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–æ–ª–µ–π
        """

        session = Session()
        session.query(ServerIgnoreRolesListOfLevels).filter_by(server_id=str(ctx.guild.id)).delete()
        session.commit()
        session.close()

        await ctx.send(embed=SuccessfulMessage("–í—ã —Å–±—Ä–æ—Å–∏–ª–∏ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–æ–ª–µ–π"))
