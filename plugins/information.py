import discord
from discord import Status
from discord.ext import commands
from discord.ext.commands import CommandError

from main import Session, __version__
from core.database import User, UserScoreToAnotherUser
from core.commands import Cog, Group, Command
from core.templates import SuccessfulMessage, DefaultEmbed as Embed, send_message_with_reaction_choice
from core.converts import convert_status, convert_activity_type, convert_voice_region, convert_verification_level


class Information(Cog, name="info"):
    def __init__(self, bot):
        super(Information, self).__init__(bot)
        self.ru_name = "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

    @commands.command("user", Command)
    async def user_information(self, ctx, user: commands.MemberConverter = None):
        """
        –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        :argname user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :argdesc user: –∏–º—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :argreq user: False

        :example: `{prefix}user`  - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        :example: `{prefix}user @anyone`  - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ anyone
        """
        if user is None:
            user = ctx.author

        status = convert_status(user.status)
        created_at = user.created_at.strftime("%d.%m.%Y, %H:%M:%S")
        joined_at = user.joined_at.strftime("%d.%m.%Y, %H:%M:%S")

        if type(user.activity) is discord.CustomActivity:
            activity = f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:** {user.activity}\n"

            if len(user.activities) > 1:
                activity += f"**{convert_activity_type(user.activities[1].type)}** {user.activities[1].name}\n"
        else:
            activity = f"**{convert_activity_type(user.activity.type)}** " \
                       f"{user.activity.name}\n" if user.activity else ""

        session = Session()

        user_from_db = session.query(User).filter_by(user_id=str(user.id)).first()
        bio = user_from_db.bio if user_from_db is not None else None

        up_score = session.query(UserScoreToAnotherUser).filter_by(rated_user_id=str(user.id), score=True).count()
        down_score = session.query(UserScoreToAnotherUser).filter_by(rated_user_id=str(user.id), score=False).count()

        user_score = up_score - down_score
        user_score = str(user_score) if user_score <= 0 else f"+{user_score}"

        session.close()

        if bio is None:
            if user == ctx.author:
                bio = "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–¥–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `.bio`"
            else:
                bio = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–≤—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–¥–µ—Å—å"

        app = await self.client.application_info()
        is_dev = app.owner.id == user.id

        message = Embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ \"{user.display_name}\"" + (" :ice_cube:" if is_dev else ""),
            description=bio
        )
        message.add_field(
            name="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ù–∏–∫–Ω–µ–π–º:** {user.name}#{user.discriminator}\n"
                  f"**–†–µ–ø—É—Ç–∞—Ü–∏—è:** {user_score}\n"
                  f"**–°—Ç–∞—Ç—É—Å:** {status}\n{activity}"
                  f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {created_at}\n"
                  f"**–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–µ–Ω–∏—è:** {joined_at}",
        )
        message.set_thumbnail(url=user.avatar_url_as(static_format="jpg"))
        message.set_footer(text=f"ID: {user.id}")

        await ctx.send(embed=message)

    @commands.command("bio", Command)
    async def change_bio(self, ctx, *, text=None):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ

        :note: –î–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–º —Å–µ—Ä–≤–µ—Ä–µ –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É

        :argname text: —Ç–µ–∫—Å—Ç
        :argdesc text: —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        :argnote text: –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, —Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ —É–¥–∞–ª–∏—Ç—å—Å—è (–µ—Å–ª–∏ –æ–Ω–∞, –∫–æ–Ω–µ—á–Ω–æ, –µ—Å—Ç—å)
        :argreq text: True

        :example: `.bio –Ø –ª—é–±–ª—é –∫–ª—É–±–Ω–∏–∫—É!`  - –ø–æ—Å—Ç–∞–≤–∏—Ç—å "–Ø –ª—é–±–ª—é –∫–ª—É–±–Ω–∏–∫—É!" –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
        :example: `.bio` - —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞)
        """
        session = Session()

        user_from_db = session.query(User).filter_by(user_id=str(ctx.author.id)).first()
        if user_from_db is None:
            user_from_db = User(user_id=str(ctx.author.id))
            session.add(user_from_db)

        previous_bio = user_from_db.bio

        if text is not None:
            if len(text) > 512:
                raise CommandError("–Ø –Ω–µ –º–æ–≥—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–µ 512 —Å–∏–º–≤–æ–ª–æ–≤")
            elif text == previous_bio:
                raise CommandError("–í–≤–µ–¥—ë–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
            else:
                user_from_db.bio = text
                message = SuccessfulMessage("–Ø –∏–∑–º–µ–Ω–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ")
        else:
            if previous_bio is None:
                raise CommandError("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç")
            else:
                user_from_db.bio = None

                message = SuccessfulMessage("–Ø —É–¥–∞–ª–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ")

        await ctx.send(embed=message)

        session.commit()
        session.close()

    @commands.group("rep", cls=Group, aliases=["rate"], invoke_without_command=True)
    async def set_reputation_for_user(self, ctx, user: commands.MemberConverter):
        """
        –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        :argname user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :argdesc user: –∏–º—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :argreq user: True

        :example: `.rep @anyone`  - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é anyone
        """
        if user == ctx.author:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif user.bot:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞")

        session = Session()

        db_kwargs = {
            "user_id": str(ctx.author.id),
            "rated_user_id": str(user.id)
        }

        user_score_from_db = session.query(UserScoreToAnotherUser).filter_by(**db_kwargs).first()

        emojis = {
            "up": "‚¨ÜÔ∏è",
            "down": "‚¨áÔ∏è"
        }

        if user_score_from_db is None:
            emojis["cancel"] = "üö´"
            embed = Embed(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                description=f"{emojis['up']} - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è {emojis['down']} - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è\n\n"
                            f"{emojis['cancel']} - –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )

            message, answer = await send_message_with_reaction_choice(self.client, ctx, embed, emojis)

            if answer == "up":
                session.add(UserScoreToAnotherUser(**db_kwargs, score=True))
                session.commit()
                await message.edit(embed=SuccessfulMessage(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É "
                                                           f"`{user.display_name}`"))
            elif answer == "down":
                session.add(UserScoreToAnotherUser(**db_kwargs, score=False))
                session.commit()
                await message.edit(embed=SuccessfulMessage(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É "
                                                           f"`{user.display_name}`"))
            elif answer == "cancel":
                await message.edit(embed=Embed(
                    title=":x: –û—Ç–º–µ–Ω–µ–Ω–æ",
                    description="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    color=0xDD2E44
                ))
        else:
            cancelled_message = Embed(
                title=":x: –û—Ç–º–µ–Ω–µ–Ω–æ",
                description="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                color=0xDD2E44
            )

            emojis["remove"] = "‚ùå"
            emojis["cancel"] = "üö´"

            if user_score_from_db.score is True:
                del emojis["up"]

                embed = Embed(
                    title="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    description=f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: `–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è`\n"
                                f"{emojis['down']} - –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é\n"
                                f"{emojis['remove']} - –£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
                                f"{emojis['cancel']} - –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                )

                message, answer = await send_message_with_reaction_choice(self.client, ctx, embed, emojis)

                if answer == "down":
                    user_score_from_db.score = False
                    session.commit()
                    await message.edit(embed=SuccessfulMessage(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é "
                                                               f"`{user.display_name}`"))
                elif answer == "remove":
                    session.delete(user_score_from_db)
                    session.commit()
                    await message.edit(embed=SuccessfulMessage(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –æ—Ü–µ–Ω–∫—É `{user.display_name}`"))
                elif answer == "cancel":
                    await message.edit(embed=cancelled_message)
            else:
                del emojis["down"]

                embed = Embed(
                    title="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    description=f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: `–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è`\n"
                                f"{emojis['up']} - –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é\n"
                                f"{emojis['remove']} - –£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
                                f"{emojis['cancel']} - –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                )

                message, answer = await send_message_with_reaction_choice(self.client, ctx, embed, emojis)

                if answer == "up":
                    user_score_from_db.score = True
                    session.commit()
                    await message.edit(embed=SuccessfulMessage(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é "
                                                               f"`{user.display_name}`"))
                elif answer == "remove":
                    session.delete(user_score_from_db)
                    session.commit()
                    await message.edit(embed=SuccessfulMessage(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –æ—Ü–µ–Ω–∫—É `{user.display_name}`"))
                elif answer == "cancel":
                    await message.edit(embed=cancelled_message)

        session.close()

    @set_reputation_for_user.command("+", Command, aliases=["up"])
    async def rate_up_user(self, ctx, user: commands.MemberConverter):
        """
        –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        :argname user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :argdesc user: –∏–º—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :argreq user: True

        :example: `.rep + @anyone`  - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é anyone
        """
        if user == ctx.author:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif user.bot:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞")

        session = Session()

        db_kwargs = {
            "user_id": str(ctx.author.id),
            "rated_user_id": str(user.id)
        }

        score_from_db = session.query(UserScoreToAnotherUser).filter_by(**db_kwargs).first()

        if score_from_db is None:
            session.add(UserScoreToAnotherUser(**db_kwargs, score=True))
            embed = SuccessfulMessage(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É `{user.display_name}`")
        else:
            if score_from_db.score is True:
                session.close()
                raise CommandError("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                score_from_db.score = True
                embed = SuccessfulMessage(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é `{user.display_name}`")

        await ctx.send(embed=embed)

        session.commit()
        session.close()

    @set_reputation_for_user.command("-", Command, aliases=["down"])
    async def rate_down_user(self, ctx, user: commands.MemberConverter):
        """
        –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        :argname user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :argdesc user: –∏–º—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :argreq user: True

        :example: `.rep - @anyone`  - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é anyone
        """
        if user == ctx.author:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif user.bot:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞")

        session = Session()

        db_kwargs = {
            "user_id": str(ctx.author.id),
            "rated_user_id": str(user.id)
        }

        score_from_db = session.query(UserScoreToAnotherUser).filter_by(**db_kwargs).first()

        if score_from_db is None:
            session.add(UserScoreToAnotherUser(**db_kwargs, score=False))
            embed = SuccessfulMessage(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É `{user.display_name}`")
        else:
            if score_from_db.score is False:
                session.close()
                raise CommandError("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                score_from_db.score = False
                session.commit()
                embed = SuccessfulMessage(f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é `{user.display_name}`")

        await ctx.send(embed=embed)

        session.close()

    @set_reputation_for_user.command("remove", Command)
    async def remove_score_user(self, ctx, user: commands.MemberConverter):
        """
        –£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        :argname user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :argdesc user: –∏–º—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :argreq user: True

        :example: `.rep remove @anyone`  -  —É–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è anyone
        """
        if user == ctx.author:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif user.bot:
            raise CommandError("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É —É –±–æ—Ç–∞")

        session = Session()

        db_kwargs = {
            "user_id": str(ctx.author.id),
            "rated_user_id": str(user.id)
        }

        score_from_db = session.query(UserScoreToAnotherUser).filter_by(**db_kwargs)

        if score_from_db is None:
            session.close()
            raise CommandError("–í—ã –Ω–µ —Å—Ç–∞–≤–∏–ª–∏ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ü–µ–Ω–∫—É")
        else:
            score_from_db.delete()
            session.commit()
            embed = SuccessfulMessage(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –æ—Ü–µ–Ω–∫—É `{user.display_name}`")

            await ctx.send(embed=embed)

        session.close()

    @commands.command("server", Command)
    async def server_information(self, ctx):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        server = ctx.guild

        region = convert_voice_region(server.region)
        created_at = server.created_at.strftime("%d.%m.%Y, %H:%M:%S")

        def members_counter():
            members = server.members

            bots = len([x for x in members if x.bot])
            users = len(members) - bots
            online = len([x for x in members if x.status is not (Status.offline or Status.invisible) and not x.bot])
            offline = len([x for x in members if x.status is (Status.offline or Status.invisible) and not x.bot])

            info = f"–ë–æ—Ç–æ–≤: **{bots}**"
            info += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{users}**"
            info += f"\n–û–Ω–ª–∞–π–Ω: **{online}**" if online != 0 else ""
            info += f"\n–û—Ñ—Ñ–ª–∞–π–Ω: **{offline}**" if offline != 0 else ""

            return info

        def channels_counter():
            text = len(server.text_channels)
            voice = len(server.voice_channels)

            info = f"–í—Å–µ–≥–æ: **{voice + text}**" \
                   f"\n–¢–µ–∫—Å—Ç–æ–≤—ã—Ö: **{text}**"
            info += f"\n–ì–æ–ª–æ—Å–æ–≤—ã—Ö: **{voice}**"

            return info

        message = Embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ \"{server.name}\"",
            description=f"**–í–ª–∞–¥–µ–ª–µ—Ü:** {server.owner}"
                        f"\n**–†–µ–≥–∏–æ–Ω:** {region}"
                        f"\n**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {created_at}"
        )
        message.add_field(
            name="–£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value=members_counter(),
            inline=True
        )
        message.add_field(
            name="–ö–∞–Ω–∞–ª—ã",
            value=channels_counter(),
            inline=True
        )
        message.set_thumbnail(url=server.icon_url_as(static_format="jpg", size=512))
        message.set_footer(text=f"ID: {server.id}")

        await ctx.send(embed=message)

    @commands.command("info", Command)
    async def about_bot(self, ctx):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        app = await self.client.application_info()

        message = Embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ \"{app.name}\"",
            description=app.description
        )
        message.set_thumbnail(url=self.client.user.avatar_url)
        message.set_footer(
            text="¬© volkovik 2020. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã",
            icon_url="https://avatars.githubusercontent.com/u/40608600"
        )
        message.add_field(
            name="–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏",
            value=f"[Discord —Å–µ—Ä–≤–µ—Ä](https://discord.gg/atxwBRB)\n"
                  f"[–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫](https://github.com/volkovik)\n"
                  f"[–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞](https://discord.com/oauth2/authorize?client_id={app.id}&scope=bot&permissions=8)"
        )
        message.add_field(
            name="–í–µ—Ä—Å–∏—è –±–æ—Ç–∞",
            value=__version__
        )

        await ctx.send(embed=message)


def setup(bot):
    bot.add_cog(Information(bot))
